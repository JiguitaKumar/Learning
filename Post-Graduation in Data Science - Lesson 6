##Lesson 6

#1. Write a Python program to generate six random integers between 10 and 30.
import numpy as np
import numpy.random as npr
import matplotlib.pyplot as plt
import pandas as pd

npr.randint(10, 30, 6)

#2. Write a Python program to generate five random numbers from the standard normal distribution N(0,1).
npr.normal(0, 1, 5)
npr.randn(5)

#3. Write a Python program to create a 5x5 array with random values and find the minimum and maximum values
x = npr.rand(25).reshape(5,5)
x
x.min()
x.max()

y = npr.random((5,5))
y

z = npr.rand(5,5)
z

#4. Generate 1,000,000 random numbers from the standard normal distribution and plot a histogram
N = 1000000
sample = npr.randn(N)
plt.hist(sample, bins=100)

#5. What is the probability that you get a sum higher than 5 and lower than 10 if you roll two dices?
N = 10**5
n=5
m=10
throws = npr.randint(1, 6, (N,2))
throw_sum = throws.sum(axis=1) 
sum((throw_sum > n) & ( throw_sum < m)) / N

#6. Plot 100 paths of stochastic process for an asset with the following conditions:
#•Numpy seed of 5
#•Time steps of 1 day
#•One year of trading days
#•Daily vol of 1.575%
#•Semiannual Drift of 2.5%
#•Inicial price of 100

npr.seed(3)
paths = 500 #number of paths we're going to plot

M = 252 #one year of trading days
dt = 1/M #time step

S = np.zeros((M+1, paths)) 
S[0] = 100 #initial price

u = 0.05 #annual drift (2.5% * 2)
sigma = 0.01575 * np.sqrt(M)
W = np.sqrt(dt) * npr.randn(paths) #Brownian motion

for t in range(1, M + 1):
     S[t] = S[t - 1] * np.exp((u - 0.5 * sigma ** 2) * dt + sigma * np.sqrt(dt) * npr.randn(paths))

plt.plot(S);

#6b. Determine the price of a call option with a strike of 110 with 1 year to expiry (consider a discount rate of 0%)
K = 110
call = np.sum(np.maximum(S[-1] - K, 0)) / paths
call
